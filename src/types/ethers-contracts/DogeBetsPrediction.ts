/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace DogeBetsPredictionV2 {
  export type BetInfoStruct = {
    position: BigNumberish;
    amount: BigNumberish;
    claimed: boolean;
  };

  export type BetInfoStructOutput = [number, BigNumber, boolean] & {
    position: number;
    amount: BigNumber;
    claimed: boolean;
  };
}

export interface DogeBetsPredictionInterface extends utils.Interface {
  functions: {
    "Bets(uint256,address)": FunctionFragment;
    "BlackListInsert(address)": FunctionFragment;
    "BlackListRemove(address)": FunctionFragment;
    "ChangePriceSource(string)": FunctionFragment;
    "Claimable(uint256,address)": FunctionFragment;
    "Execute(int256,uint32,uint256,uint256)": FunctionFragment;
    "FundsExtract(uint256)": FunctionFragment;
    "FundsInject()": FunctionFragment;
    "GetTotalReservedReferralFunds()": FunctionFragment;
    "GetUserRounds(address,uint256,uint256)": FunctionFragment;
    "GetUserRoundsLength(address)": FunctionFragment;
    "HouseBet(uint256,uint256)": FunctionFragment;
    "HouseBetsWithinLimits(uint256,uint256)": FunctionFragment;
    "IsPaused()": FunctionFragment;
    "OwnershipRenounce()": FunctionFragment;
    "OwnershipTransfer(address)": FunctionFragment;
    "Pause()": FunctionFragment;
    "ReferralRewardsAvailable(address)": FunctionFragment;
    "Refundable(uint256,address)": FunctionFragment;
    "RewardUser(address,uint256)": FunctionFragment;
    "RoundCancel(uint256,bool,bool)": FunctionFragment;
    "RoundLock(int256,uint32)": FunctionFragment;
    "RoundStart()": FunctionFragment;
    "Rounds(uint256)": FunctionFragment;
    "SetHouseBetMinRatio(uint256)": FunctionFragment;
    "SetMinBetAmount(uint256)": FunctionFragment;
    "SetOperator(address)": FunctionFragment;
    "SetReferralsContract(address)": FunctionFragment;
    "SetRewardRate(uint256)": FunctionFragment;
    "SetRoundBufferAndInterval(uint256,uint256)": FunctionFragment;
    "Unpause()": FunctionFragment;
    "UserBets(address,uint256)": FunctionFragment;
    "currentBlockNumber()": FunctionFragment;
    "currentBlockTimestamp()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "currentSettings()": FunctionFragment;
    "lockedOnce()": FunctionFragment;
    "minBetAmount()": FunctionFragment;
    "minimumRewardRate()": FunctionFragment;
    "operatorAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "priceSource()": FunctionFragment;
    "referralsContract()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "roundBuffer()": FunctionFragment;
    "roundInterval()": FunctionFragment;
    "startedOnce()": FunctionFragment;
    "user_BetBear(uint256)": FunctionFragment;
    "user_BetBearSpecial(uint256,address)": FunctionFragment;
    "user_BetBull(uint256)": FunctionFragment;
    "user_BetBullSpecial(uint256,address)": FunctionFragment;
    "user_Claim(uint256[])": FunctionFragment;
    "user_ReferralFundsClaim()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Bets"
      | "BlackListInsert"
      | "BlackListRemove"
      | "ChangePriceSource"
      | "Claimable"
      | "Execute"
      | "FundsExtract"
      | "FundsInject"
      | "GetTotalReservedReferralFunds"
      | "GetUserRounds"
      | "GetUserRoundsLength"
      | "HouseBet"
      | "HouseBetsWithinLimits"
      | "IsPaused"
      | "OwnershipRenounce"
      | "OwnershipTransfer"
      | "Pause"
      | "ReferralRewardsAvailable"
      | "Refundable"
      | "RewardUser"
      | "RoundCancel"
      | "RoundLock"
      | "RoundStart"
      | "Rounds"
      | "SetHouseBetMinRatio"
      | "SetMinBetAmount"
      | "SetOperator"
      | "SetReferralsContract"
      | "SetRewardRate"
      | "SetRoundBufferAndInterval"
      | "Unpause"
      | "UserBets"
      | "currentBlockNumber"
      | "currentBlockTimestamp"
      | "currentEpoch"
      | "currentSettings"
      | "lockedOnce"
      | "minBetAmount"
      | "minimumRewardRate"
      | "operatorAddress"
      | "owner"
      | "priceSource"
      | "referralsContract"
      | "rewardRate"
      | "roundBuffer"
      | "roundInterval"
      | "startedOnce"
      | "user_BetBear"
      | "user_BetBearSpecial"
      | "user_BetBull"
      | "user_BetBullSpecial"
      | "user_Claim"
      | "user_ReferralFundsClaim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Bets",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "BlackListInsert",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "BlackListRemove",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ChangePriceSource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "Claimable",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "Execute",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "FundsExtract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "FundsInject",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GetTotalReservedReferralFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GetUserRounds",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GetUserRoundsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "HouseBet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "HouseBetsWithinLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "IsPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "OwnershipRenounce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OwnershipTransfer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "Pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ReferralRewardsAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "Refundable",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "RewardUser",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "RoundCancel",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "RoundLock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "RoundStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SetHouseBetMinRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SetMinBetAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "SetOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "SetReferralsContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "SetRewardRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SetRoundBufferAndInterval",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "Unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UserBets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSettings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedOnce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumRewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startedOnce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "user_BetBear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_BetBearSpecial",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "user_BetBull",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_BetBullSpecial",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "user_Claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "user_ReferralFundsClaim",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "Bets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BlackListInsert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BlackListRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ChangePriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FundsExtract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FundsInject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetTotalReservedReferralFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetUserRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetUserRoundsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "HouseBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "HouseBetsWithinLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "IsPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OwnershipRenounce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OwnershipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ReferralRewardsAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Refundable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RewardUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RoundCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RoundLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RoundStart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SetHouseBetMinRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetMinBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetReferralsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetRoundBufferAndInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UserBets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockedOnce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roundBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startedOnce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_BetBear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_BetBearSpecial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_BetBull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_BetBullSpecial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "user_Claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "user_ReferralFundsClaim",
    data: BytesLike
  ): Result;

  events: {
    "BetBear(address,uint256,uint256)": EventFragment;
    "BetBull(address,uint256,uint256)": EventFragment;
    "BufferAndIntervalSecondsUpdated(uint256,uint256)": EventFragment;
    "CancelRound(uint256)": EventFragment;
    "Claim(address,uint256,uint256)": EventFragment;
    "ContractPaused(uint256)": EventFragment;
    "ContractPaused(address)": EventFragment;
    "ContractUnpaused(uint256)": EventFragment;
    "ContractUnpaused(address)": EventFragment;
    "EndRound(uint256,int256,uint32)": EventFragment;
    "HouseBetMade(address,uint256,uint256,uint256)": EventFragment;
    "HouseBetMinRatioUpdated(uint256)": EventFragment;
    "InjectFunds(address)": EventFragment;
    "LockRound(uint256,int256,uint32)": EventFragment;
    "MinBetAmountUpdated(uint256,uint256)": EventFragment;
    "NewPriceSource(string)": EventFragment;
    "NewReferralsContract(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReferralClaim(address,uint256)": EventFragment;
    "RewardRateUpdated(uint256)": EventFragment;
    "RewardsCalculated(uint256,uint256,uint256)": EventFragment;
    "StartRound(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BetBear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BetBull"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BufferAndIntervalSecondsUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractPaused(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractPaused(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUnpaused(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUnpaused(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HouseBetMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HouseBetMinRatioUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InjectFunds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinBetAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriceSource"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReferralsContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsCalculated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartRound"): EventFragment;
}

export interface BetBearEventObject {
  sender: string;
  epoch: BigNumber;
  amount: BigNumber;
}
export type BetBearEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BetBearEventObject
>;

export type BetBearEventFilter = TypedEventFilter<BetBearEvent>;

export interface BetBullEventObject {
  sender: string;
  epoch: BigNumber;
  amount: BigNumber;
}
export type BetBullEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BetBullEventObject
>;

export type BetBullEventFilter = TypedEventFilter<BetBullEvent>;

export interface BufferAndIntervalSecondsUpdatedEventObject {
  roundBuffer: BigNumber;
  roundInterval: BigNumber;
}
export type BufferAndIntervalSecondsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BufferAndIntervalSecondsUpdatedEventObject
>;

export type BufferAndIntervalSecondsUpdatedEventFilter =
  TypedEventFilter<BufferAndIntervalSecondsUpdatedEvent>;

export interface CancelRoundEventObject {
  epoch: BigNumber;
}
export type CancelRoundEvent = TypedEvent<[BigNumber], CancelRoundEventObject>;

export type CancelRoundEventFilter = TypedEventFilter<CancelRoundEvent>;

export interface ClaimEventObject {
  sender: string;
  epoch: BigNumber;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface ContractPaused_uint256_EventObject {
  epoch: BigNumber;
}
export type ContractPaused_uint256_Event = TypedEvent<
  [BigNumber],
  ContractPaused_uint256_EventObject
>;

export type ContractPaused_uint256_EventFilter =
  TypedEventFilter<ContractPaused_uint256_Event>;

export interface ContractPaused_address_EventObject {
  account: string;
}
export type ContractPaused_address_Event = TypedEvent<
  [string],
  ContractPaused_address_EventObject
>;

export type ContractPaused_address_EventFilter =
  TypedEventFilter<ContractPaused_address_Event>;

export interface ContractUnpaused_uint256_EventObject {
  epoch: BigNumber;
}
export type ContractUnpaused_uint256_Event = TypedEvent<
  [BigNumber],
  ContractUnpaused_uint256_EventObject
>;

export type ContractUnpaused_uint256_EventFilter =
  TypedEventFilter<ContractUnpaused_uint256_Event>;

export interface ContractUnpaused_address_EventObject {
  account: string;
}
export type ContractUnpaused_address_Event = TypedEvent<
  [string],
  ContractUnpaused_address_EventObject
>;

export type ContractUnpaused_address_EventFilter =
  TypedEventFilter<ContractUnpaused_address_Event>;

export interface EndRoundEventObject {
  epoch: BigNumber;
  price: BigNumber;
  timestamp: number;
}
export type EndRoundEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  EndRoundEventObject
>;

export type EndRoundEventFilter = TypedEventFilter<EndRoundEvent>;

export interface HouseBetMadeEventObject {
  sender: string;
  epoch: BigNumber;
  bullAmount: BigNumber;
  bearAmount: BigNumber;
}
export type HouseBetMadeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  HouseBetMadeEventObject
>;

export type HouseBetMadeEventFilter = TypedEventFilter<HouseBetMadeEvent>;

export interface HouseBetMinRatioUpdatedEventObject {
  minRatioPercents: BigNumber;
}
export type HouseBetMinRatioUpdatedEvent = TypedEvent<
  [BigNumber],
  HouseBetMinRatioUpdatedEventObject
>;

export type HouseBetMinRatioUpdatedEventFilter =
  TypedEventFilter<HouseBetMinRatioUpdatedEvent>;

export interface InjectFundsEventObject {
  sender: string;
}
export type InjectFundsEvent = TypedEvent<[string], InjectFundsEventObject>;

export type InjectFundsEventFilter = TypedEventFilter<InjectFundsEvent>;

export interface LockRoundEventObject {
  epoch: BigNumber;
  price: BigNumber;
  timestamp: number;
}
export type LockRoundEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  LockRoundEventObject
>;

export type LockRoundEventFilter = TypedEventFilter<LockRoundEvent>;

export interface MinBetAmountUpdatedEventObject {
  epoch: BigNumber;
  minBetAmount: BigNumber;
}
export type MinBetAmountUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinBetAmountUpdatedEventObject
>;

export type MinBetAmountUpdatedEventFilter =
  TypedEventFilter<MinBetAmountUpdatedEvent>;

export interface NewPriceSourceEventObject {
  priceSource: string;
}
export type NewPriceSourceEvent = TypedEvent<
  [string],
  NewPriceSourceEventObject
>;

export type NewPriceSourceEventFilter = TypedEventFilter<NewPriceSourceEvent>;

export interface NewReferralsContractEventObject {
  newContract: string;
}
export type NewReferralsContractEvent = TypedEvent<
  [string],
  NewReferralsContractEventObject
>;

export type NewReferralsContractEventFilter =
  TypedEventFilter<NewReferralsContractEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReferralClaimEventObject {
  sender: string;
  amount: BigNumber;
}
export type ReferralClaimEvent = TypedEvent<
  [string, BigNumber],
  ReferralClaimEventObject
>;

export type ReferralClaimEventFilter = TypedEventFilter<ReferralClaimEvent>;

export interface RewardRateUpdatedEventObject {
  rewardRate: BigNumber;
}
export type RewardRateUpdatedEvent = TypedEvent<
  [BigNumber],
  RewardRateUpdatedEventObject
>;

export type RewardRateUpdatedEventFilter =
  TypedEventFilter<RewardRateUpdatedEvent>;

export interface RewardsCalculatedEventObject {
  epoch: BigNumber;
  rewardBaseCalAmount: BigNumber;
  rewardAmount: BigNumber;
}
export type RewardsCalculatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RewardsCalculatedEventObject
>;

export type RewardsCalculatedEventFilter =
  TypedEventFilter<RewardsCalculatedEvent>;

export interface StartRoundEventObject {
  epoch: BigNumber;
}
export type StartRoundEvent = TypedEvent<[BigNumber], StartRoundEventObject>;

export type StartRoundEventFilter = TypedEventFilter<StartRoundEvent>;

export interface DogeBetsPrediction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DogeBetsPredictionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Bets(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    BlackListInsert(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    BlackListRemove(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ChangePriceSource(
      newPriceSource: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    Claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    Execute(
      price: BigNumberish,
      timestamp: BigNumberish,
      betOnBull: BigNumberish,
      betOnBear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    FundsExtract(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    FundsInject(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    GetTotalReservedReferralFunds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    GetUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], DogeBetsPredictionV2.BetInfoStructOutput[], BigNumber]
    >;

    GetUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    HouseBet(
      bullAmount: BigNumberish,
      bearAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    HouseBetsWithinLimits(
      betBull: BigNumberish,
      betBear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    IsPaused(overrides?: CallOverrides): Promise<[boolean]>;

    OwnershipRenounce(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    OwnershipTransfer(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    Pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ReferralRewardsAvailable(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    Refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    RewardUser(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    RoundCancel(
      epoch: BigNumberish,
      canceled: boolean,
      closed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    RoundLock(
      price: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    RoundStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    Rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        boolean,
        boolean
      ] & {
        epoch: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
        lockPrice: BigNumber;
        closePrice: BigNumber;
        startTimestamp: number;
        lockTimestamp: number;
        closeTimestamp: number;
        lockPriceTimestamp: number;
        closePriceTimestamp: number;
        closed: boolean;
        canceled: boolean;
      }
    >;

    SetHouseBetMinRatio(
      minBearToBullRatioPercents: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetMinBetAmount(
      newMinBetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetReferralsContract(
      newContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetRewardRate(
      newRewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SetRoundBufferAndInterval(
      roundBufferSeconds: BigNumberish,
      roundIntervalSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    Unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    UserBets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentSettings(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, BigNumber, BigNumber, string, BigNumber]
    >;

    lockedOnce(overrides?: CallOverrides): Promise<[boolean]>;

    minBetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumRewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    operatorAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceSource(overrides?: CallOverrides): Promise<[string]>;

    referralsContract(overrides?: CallOverrides): Promise<[string]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    roundBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    roundInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    startedOnce(overrides?: CallOverrides): Promise<[boolean]>;

    user_BetBear(
      epoch: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    user_BetBearSpecial(
      epoch: BigNumberish,
      newReferrer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    user_BetBull(
      epoch: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    user_BetBullSpecial(
      epoch: BigNumberish,
      newReferrer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    user_Claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    user_ReferralFundsClaim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  Bets(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, boolean] & {
      position: number;
      amount: BigNumber;
      claimed: boolean;
    }
  >;

  BlackListInsert(
    userAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  BlackListRemove(
    userAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ChangePriceSource(
    newPriceSource: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  Claimable(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  Execute(
    price: BigNumberish,
    timestamp: BigNumberish,
    betOnBull: BigNumberish,
    betOnBear: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  FundsExtract(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  FundsInject(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  GetTotalReservedReferralFunds(overrides?: CallOverrides): Promise<BigNumber>;

  GetUserRounds(
    user: string,
    cursor: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], DogeBetsPredictionV2.BetInfoStructOutput[], BigNumber]
  >;

  GetUserRoundsLength(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  HouseBet(
    bullAmount: BigNumberish,
    bearAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  HouseBetsWithinLimits(
    betBull: BigNumberish,
    betBear: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  IsPaused(overrides?: CallOverrides): Promise<boolean>;

  OwnershipRenounce(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  OwnershipTransfer(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  Pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ReferralRewardsAvailable(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  Refundable(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  RewardUser(
    user: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  RoundCancel(
    epoch: BigNumberish,
    canceled: boolean,
    closed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  RoundLock(
    price: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  RoundStart(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  Rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      number,
      number,
      number,
      boolean,
      boolean
    ] & {
      epoch: BigNumber;
      bullAmount: BigNumber;
      bearAmount: BigNumber;
      rewardBaseCalAmount: BigNumber;
      rewardAmount: BigNumber;
      lockPrice: BigNumber;
      closePrice: BigNumber;
      startTimestamp: number;
      lockTimestamp: number;
      closeTimestamp: number;
      lockPriceTimestamp: number;
      closePriceTimestamp: number;
      closed: boolean;
      canceled: boolean;
    }
  >;

  SetHouseBetMinRatio(
    minBearToBullRatioPercents: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetMinBetAmount(
    newMinBetAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetOperator(
    _operatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetReferralsContract(
    newContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetRewardRate(
    newRewardRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SetRoundBufferAndInterval(
    roundBufferSeconds: BigNumberish,
    roundIntervalSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  Unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  UserBets(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  currentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  currentSettings(
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, BigNumber, BigNumber, string, BigNumber]
  >;

  lockedOnce(overrides?: CallOverrides): Promise<boolean>;

  minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minimumRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  operatorAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceSource(overrides?: CallOverrides): Promise<string>;

  referralsContract(overrides?: CallOverrides): Promise<string>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  roundBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  roundInterval(overrides?: CallOverrides): Promise<BigNumber>;

  startedOnce(overrides?: CallOverrides): Promise<boolean>;

  user_BetBear(
    epoch: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  user_BetBearSpecial(
    epoch: BigNumberish,
    newReferrer: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  user_BetBull(
    epoch: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  user_BetBullSpecial(
    epoch: BigNumberish,
    newReferrer: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  user_Claim(
    epochs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  user_ReferralFundsClaim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Bets(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    BlackListInsert(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    BlackListRemove(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ChangePriceSource(
      newPriceSource: string,
      overrides?: CallOverrides
    ): Promise<void>;

    Claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    Execute(
      price: BigNumberish,
      timestamp: BigNumberish,
      betOnBull: BigNumberish,
      betOnBear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    FundsExtract(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    FundsInject(overrides?: CallOverrides): Promise<void>;

    GetTotalReservedReferralFunds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], DogeBetsPredictionV2.BetInfoStructOutput[], BigNumber]
    >;

    GetUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    HouseBet(
      bullAmount: BigNumberish,
      bearAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    HouseBetsWithinLimits(
      betBull: BigNumberish,
      betBear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    IsPaused(overrides?: CallOverrides): Promise<boolean>;

    OwnershipRenounce(overrides?: CallOverrides): Promise<void>;

    OwnershipTransfer(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    Pause(overrides?: CallOverrides): Promise<void>;

    ReferralRewardsAvailable(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    RewardUser(
      user: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    RoundCancel(
      epoch: BigNumberish,
      canceled: boolean,
      closed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    RoundLock(
      price: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    RoundStart(overrides?: CallOverrides): Promise<void>;

    Rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        boolean,
        boolean
      ] & {
        epoch: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
        lockPrice: BigNumber;
        closePrice: BigNumber;
        startTimestamp: number;
        lockTimestamp: number;
        closeTimestamp: number;
        lockPriceTimestamp: number;
        closePriceTimestamp: number;
        closed: boolean;
        canceled: boolean;
      }
    >;

    SetHouseBetMinRatio(
      minBearToBullRatioPercents: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    SetMinBetAmount(
      newMinBetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    SetOperator(
      _operatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    SetReferralsContract(
      newContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    SetRewardRate(
      newRewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    SetRoundBufferAndInterval(
      roundBufferSeconds: BigNumberish,
      roundIntervalSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    Unpause(overrides?: CallOverrides): Promise<void>;

    UserBets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    currentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentSettings(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, BigNumber, BigNumber, string, BigNumber]
    >;

    lockedOnce(overrides?: CallOverrides): Promise<boolean>;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minimumRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceSource(overrides?: CallOverrides): Promise<string>;

    referralsContract(overrides?: CallOverrides): Promise<string>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    roundBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    roundInterval(overrides?: CallOverrides): Promise<BigNumber>;

    startedOnce(overrides?: CallOverrides): Promise<boolean>;

    user_BetBear(epoch: BigNumberish, overrides?: CallOverrides): Promise<void>;

    user_BetBearSpecial(
      epoch: BigNumberish,
      newReferrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    user_BetBull(epoch: BigNumberish, overrides?: CallOverrides): Promise<void>;

    user_BetBullSpecial(
      epoch: BigNumberish,
      newReferrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    user_Claim(
      epochs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    user_ReferralFundsClaim(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BetBear(address,uint256,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): BetBearEventFilter;
    BetBear(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): BetBearEventFilter;

    "BetBull(address,uint256,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): BetBullEventFilter;
    BetBull(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): BetBullEventFilter;

    "BufferAndIntervalSecondsUpdated(uint256,uint256)"(
      roundBuffer?: null,
      roundInterval?: null
    ): BufferAndIntervalSecondsUpdatedEventFilter;
    BufferAndIntervalSecondsUpdated(
      roundBuffer?: null,
      roundInterval?: null
    ): BufferAndIntervalSecondsUpdatedEventFilter;

    "CancelRound(uint256)"(epoch?: BigNumberish | null): CancelRoundEventFilter;
    CancelRound(epoch?: BigNumberish | null): CancelRoundEventFilter;

    "Claim(address,uint256,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): ClaimEventFilter;

    "ContractPaused(uint256)"(
      epoch?: BigNumberish | null
    ): ContractPaused_uint256_EventFilter;
    "ContractPaused(address)"(
      account?: null
    ): ContractPaused_address_EventFilter;
    "ContractUnpaused(uint256)"(
      epoch?: BigNumberish | null
    ): ContractUnpaused_uint256_EventFilter;
    "ContractUnpaused(address)"(
      account?: null
    ): ContractUnpaused_address_EventFilter;

    "EndRound(uint256,int256,uint32)"(
      epoch?: BigNumberish | null,
      price?: null,
      timestamp?: null
    ): EndRoundEventFilter;
    EndRound(
      epoch?: BigNumberish | null,
      price?: null,
      timestamp?: null
    ): EndRoundEventFilter;

    "HouseBetMade(address,uint256,uint256,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      bullAmount?: null,
      bearAmount?: null
    ): HouseBetMadeEventFilter;
    HouseBetMade(
      sender?: string | null,
      epoch?: BigNumberish | null,
      bullAmount?: null,
      bearAmount?: null
    ): HouseBetMadeEventFilter;

    "HouseBetMinRatioUpdated(uint256)"(
      minRatioPercents?: null
    ): HouseBetMinRatioUpdatedEventFilter;
    HouseBetMinRatioUpdated(
      minRatioPercents?: null
    ): HouseBetMinRatioUpdatedEventFilter;

    "InjectFunds(address)"(sender?: string | null): InjectFundsEventFilter;
    InjectFunds(sender?: string | null): InjectFundsEventFilter;

    "LockRound(uint256,int256,uint32)"(
      epoch?: BigNumberish | null,
      price?: null,
      timestamp?: null
    ): LockRoundEventFilter;
    LockRound(
      epoch?: BigNumberish | null,
      price?: null,
      timestamp?: null
    ): LockRoundEventFilter;

    "MinBetAmountUpdated(uint256,uint256)"(
      epoch?: BigNumberish | null,
      minBetAmount?: null
    ): MinBetAmountUpdatedEventFilter;
    MinBetAmountUpdated(
      epoch?: BigNumberish | null,
      minBetAmount?: null
    ): MinBetAmountUpdatedEventFilter;

    "NewPriceSource(string)"(priceSource?: null): NewPriceSourceEventFilter;
    NewPriceSource(priceSource?: null): NewPriceSourceEventFilter;

    "NewReferralsContract(address)"(
      newContract?: null
    ): NewReferralsContractEventFilter;
    NewReferralsContract(newContract?: null): NewReferralsContractEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ReferralClaim(address,uint256)"(
      sender?: string | null,
      amount?: null
    ): ReferralClaimEventFilter;
    ReferralClaim(
      sender?: string | null,
      amount?: null
    ): ReferralClaimEventFilter;

    "RewardRateUpdated(uint256)"(
      rewardRate?: null
    ): RewardRateUpdatedEventFilter;
    RewardRateUpdated(rewardRate?: null): RewardRateUpdatedEventFilter;

    "RewardsCalculated(uint256,uint256,uint256)"(
      epoch?: BigNumberish | null,
      rewardBaseCalAmount?: null,
      rewardAmount?: null
    ): RewardsCalculatedEventFilter;
    RewardsCalculated(
      epoch?: BigNumberish | null,
      rewardBaseCalAmount?: null,
      rewardAmount?: null
    ): RewardsCalculatedEventFilter;

    "StartRound(uint256)"(epoch?: BigNumberish | null): StartRoundEventFilter;
    StartRound(epoch?: BigNumberish | null): StartRoundEventFilter;
  };

  estimateGas: {
    Bets(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BlackListInsert(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    BlackListRemove(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ChangePriceSource(
      newPriceSource: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    Claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Execute(
      price: BigNumberish,
      timestamp: BigNumberish,
      betOnBull: BigNumberish,
      betOnBear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    FundsExtract(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    FundsInject(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    GetTotalReservedReferralFunds(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    HouseBet(
      bullAmount: BigNumberish,
      bearAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    HouseBetsWithinLimits(
      betBull: BigNumberish,
      betBear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IsPaused(overrides?: CallOverrides): Promise<BigNumber>;

    OwnershipRenounce(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    OwnershipTransfer(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    Pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ReferralRewardsAvailable(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RewardUser(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    RoundCancel(
      epoch: BigNumberish,
      canceled: boolean,
      closed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    RoundLock(
      price: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    RoundStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    Rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    SetHouseBetMinRatio(
      minBearToBullRatioPercents: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetMinBetAmount(
      newMinBetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetReferralsContract(
      newContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetRewardRate(
      newRewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SetRoundBufferAndInterval(
      roundBufferSeconds: BigNumberish,
      roundIntervalSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    Unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    UserBets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    currentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentSettings(overrides?: CallOverrides): Promise<BigNumber>;

    lockedOnce(overrides?: CallOverrides): Promise<BigNumber>;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minimumRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceSource(overrides?: CallOverrides): Promise<BigNumber>;

    referralsContract(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    roundBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    roundInterval(overrides?: CallOverrides): Promise<BigNumber>;

    startedOnce(overrides?: CallOverrides): Promise<BigNumber>;

    user_BetBear(
      epoch: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    user_BetBearSpecial(
      epoch: BigNumberish,
      newReferrer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    user_BetBull(
      epoch: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    user_BetBullSpecial(
      epoch: BigNumberish,
      newReferrer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    user_Claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    user_ReferralFundsClaim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Bets(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BlackListInsert(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    BlackListRemove(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ChangePriceSource(
      newPriceSource: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    Claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Execute(
      price: BigNumberish,
      timestamp: BigNumberish,
      betOnBull: BigNumberish,
      betOnBear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    FundsExtract(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    FundsInject(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    GetTotalReservedReferralFunds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HouseBet(
      bullAmount: BigNumberish,
      bearAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    HouseBetsWithinLimits(
      betBull: BigNumberish,
      betBear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IsPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OwnershipRenounce(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    OwnershipTransfer(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    Pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ReferralRewardsAvailable(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RewardUser(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    RoundCancel(
      epoch: BigNumberish,
      canceled: boolean,
      closed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    RoundLock(
      price: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    RoundStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    Rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SetHouseBetMinRatio(
      minBearToBullRatioPercents: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetMinBetAmount(
      newMinBetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetReferralsContract(
      newContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetRewardRate(
      newRewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SetRoundBufferAndInterval(
      roundBufferSeconds: BigNumberish,
      roundIntervalSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    Unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    UserBets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentBlockTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedOnce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumRewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralsContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roundBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roundInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startedOnce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    user_BetBear(
      epoch: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    user_BetBearSpecial(
      epoch: BigNumberish,
      newReferrer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    user_BetBull(
      epoch: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    user_BetBullSpecial(
      epoch: BigNumberish,
      newReferrer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    user_Claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    user_ReferralFundsClaim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
